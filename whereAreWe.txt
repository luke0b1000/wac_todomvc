1. The steps
    https://hyperdev.com/#!/project/maze-stealer
    !Learn how to ignore large parts of a codebase and get a piece-by-piece understanding.
    Before you start
        Read the docs (if they exist).
        Run the code.
        Play with the app to see what the code is supposed to do.
        Think about how the code might be implemented.
        Get the code into an editor.
        The process
    Look at the file structure.
        Get a sense for the vocabulary.
        Keep a note of unfamiliar concepts that you'll need to research later.
        Do a quick read-through without diving into concepts from #3.
        Test one feature with the debugger.
        Document and add comments to confusing areas.
        Research items in #3 only if required.
        Repeat.
    Next level
        Replicate parts of the app by hand (in the console).
        Make small changes and see what happens.
        Add a new feature.
2. Event listeners, toggle, delete, filter
    !Helps figure out what is this
        function whatIsThis() {        // called from whatIsThis
            console.log(this);
        }
    jQuery (this) gives you back the element that was actioned and then pass in jQuery Event Object if you don't bind(this)
    function() {}  === whatIsThis so no need for whatIsThis() // even if you run it, undefined as no return value, if it has return value then it returns it
    Also if you do put this.toggleAll(), it will run as soon as you load the site, and nothing will happen when you click it
    
    !Method Chaining
    var myFakeElement = {
        on: function(something) {
            console.log('Running .on with ' + something);
            return this;    // return myFakeElement{} for the next one to use
        },
        next: function(random) {
            console.log('Running .next with ' + random);
            return this;    // return this === myFakeElement{}
        }
    };
    myFakeElement
        .on('gordon')   // returned and then continue on with myFakeElement.on('james')
        .on('james')   // returns with myFakeElement ready for the next one
        .next(123);